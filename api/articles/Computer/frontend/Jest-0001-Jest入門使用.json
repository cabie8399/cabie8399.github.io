{"title":"[Jest] Jest入門使用","uid":"1a58a0d962193b729f8bfd18fe3a2651","slug":"Computer/frontend/Jest-0001-Jest入門使用","date":"2023-02-10T12:26:36.000Z","updated":"2023-02-09T16:28:19.464Z","comments":true,"path":"api/articles/Computer/frontend/Jest-0001-Jest入門使用.json","keywords":null,"cover":"https://miro.medium.com/v2/resize:fit:828/format:webp/1*Lj98LRbO4tDyE9UCxPV58A.jpeg","content":"<p><a href=\"https://github.com/cabie8399/Study_Note/tree/main/Javascript/0001_jest_test\">Github程式範例</a></p>\n<h1 id=\"為何要做測試\"><a href=\"#為何要做測試\" class=\"headerlink\" title=\"為何要做測試 ?\"></a>為何要做測試 ?</h1><p>為了在人工測試前先進行初步的除錯，發展出了自動化測試。</p>\n<p>前端常見的自動化測試有兩大類別，此篇主要是講解「Unit Test」，以下為簡單的類別說明：</p>\n<h2 id=\"Unit-Test\"><a href=\"#Unit-Test\" class=\"headerlink\" title=\"Unit Test\"></a><strong>Unit Test</strong></h2><p>單元測試，是以單一個行為進行測試，通常專案中最小的單位就是 funciton ，因此就是驗證 funciton 運行是否符合結果。</p>\n<h2 id=\"E2E-Test\"><a href=\"#E2E-Test\" class=\"headerlink\" title=\"E2E Test\"></a><strong>E2E Test</strong></h2><p>直接模擬 User 在 Browser 的行為做測試。</p>\n<h1 id=\"如何使用Jest\"><a href=\"#如何使用Jest\" class=\"headerlink\" title=\"如何使用Jest ?\"></a>如何使用Jest ?</h1><ul>\n<li>安裝</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cabie@cabie-ubuntu:~&#x2F;workplace&#x2F;01_study&#x2F;0001_jest_test$ npm install -save-dev jest</code></pre>\n\n<ul>\n<li>package.json : 加上scripts</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&#123;\n  &quot;devDependencies&quot;: &#123;\n    &quot;jest&quot;: &quot;^29.4.2&quot;\n  &#125;,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;jest&quot;,\n    &quot;start&quot;: &quot;node index.js&quot;\n  &#125;\n&#125;</code></pre>\n\n<ul>\n<li>index.js</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">function sum(a, b) &#123;\n    return a + b;\n&#125;;\n\nmodule.exports &#x3D; sum;</code></pre>\n\n<ul>\n<li>index.test.js</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">const sum &#x3D; require(&#39;.&#x2F;index&#39;);\n\n&#x2F;&#x2F; describe()\n&#x2F;&#x2F; 說明單元測試，類似群組的概念，將多個 test 包在一起，讓程式看起來更有結構性。\n&#x2F;&#x2F; describe(&#39;測試 sum function&#39;, function()&#123; test… &#125;)\n\n&#x2F;&#x2F; describe(&#39;僱員的行為測試&#39;, () &#x3D;&gt; &#123;\n&#x2F;&#x2F;     test(&#39;點餐內容與顧客需求相符&#39;, () &#x3D;&gt; &#123;&#125;);\n&#x2F;&#x2F;     test(&#39;結帳金額正確&#39;, () &#x3D;&gt; &#123;&#125;);\n&#x2F;&#x2F;     test(&#39;找零的金額正確&#39;, () &#x3D;&gt; &#123;&#125;);\n&#x2F;&#x2F; &#125;);\n\n&#x2F;&#x2F; test()\n&#x2F;&#x2F; 定義一個單元測試\ntest(&#39;a&#x3D;1, b&#x3D;2 加起來等於 3&#39;, () &#x3D;&gt; &#123;\n    expect(sum(1,2)).toBe(3);\n&#125;);</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>! 注意  :  在jest原生测试框架中，无法使用es6的import export语法，只能使用commonJS语法，本文解决了相关配置问题。</p></blockquote>\n<p>可參考這篇了解在ES6中如何使用</p>\n<p><a href=\"https://juejin.cn/post/6990172738853797902\">Jest使用ES6语法配置</a></p>\n<ul>\n<li>npm run test</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cabie@cabie-ubuntu:~&#x2F;workplace&#x2F;01_study&#x2F;0001_jest_test$ npm run test\n\n&gt; test\n&gt; jest\n\n PASS  .&#x2F;index.test.js\n  ✓ a&#x3D;1, b&#x3D;2 加起來等於 3 (2 ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        0.23 s\nRan all test suites.</code></pre>\n\n<p>改成toBe(7), 再跑一次</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cabie@cabie-ubuntu:~&#x2F;workplace&#x2F;01_study&#x2F;0001_jest_test$ npm run test\n\n&gt; test\n&gt; jest\n\n FAIL  .&#x2F;index.test.js\n  ✕ a&#x3D;1, b&#x3D;2 加起來等於 3 (3 ms)\n\n  ● a&#x3D;1, b&#x3D;2 加起來等於 3\n\n    expect(received).toBe(expected) &#x2F;&#x2F; Object.is equality\n\n    Expected: 7\n    Received: 3\n\n      10 | &#x2F;&#x2F; 定義一個單元測試\n      11 | test(&#39;a&#x3D;1, b&#x3D;2 加起來等於 3&#39;, () &#x3D;&gt; &#123;\n    &gt; 12 |     expect(sum(1,2)).toBe(7);\n         |                      ^\n      13 | &#125;);\n\n      at Object.toBe (index.test.js:12:22)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 total\nSnapshots:   0 total\nTime:        0.305 s, estimated 1 s\nRan all test suites.</code></pre>\n\n<ul>\n<li><p>除了使用終端機外，Jest 與 VSCode 也能有很好的整合，不需要每次運行都輸入 <code>npm run test</code>，搭配套件使用即可在每次存檔後看到測試的結果。</p>\n<p>  套件連結：<a href=\"https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest\">https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest</a></p>\n</li>\n<li><p>新增jest.config.js(Jest 設定檔案)，此測試檔案預設僅需要匯出一個空的即可運作（全部使用官方預設即可）</p>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module.exports &#x3D; &#123;\n&#125;;</code></pre>\n</li>\n<li><p>就可以看到test左邊就會顯示測試結果</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/CGxdp69.png\" alt=\"Untitled\"></p>\n<h3 id=\"Jest總結\"><a href=\"#Jest總結\" class=\"headerlink\" title=\"Jest總結\"></a>Jest總結</h3><p>單元測試難的也並非是語法，更重要的是如何驗證函式的行為與產品邏輯一致。</p>\n<ol>\n<li>測試的目標為何？ -&gt; <code>test(&#39;...&#39;, ()=&gt;&#123;&#125;)</code></li>\n<li>導入要測試的函式 -&gt; <code>sum()</code></li>\n<li>測試的期望是什麼？ -&gt; <code>expect(...).toBe(...);</code></li>\n</ol>\n<h1 id=\"什麼是TDD\"><a href=\"#什麼是TDD\" class=\"headerlink\" title=\"什麼是TDD ?\"></a>什麼是TDD ?</h1><p>全名 Test-driven Development，中文為測試驅動開發，也就是我們先寫測試再做開發，好處就是寫完code時，測試也完成了。</p>\n<p>測試驅動開發的「測試」，精髓在先定好想要的目標，強迫自己先想清楚最終目標，以終為始，避免自己走偏、迷惘、花時間在不必要的功能上。測試驅動開發的測試，不只是測試，更是一種需求的描述。</p>\n<p>不過聽了那麼久TDD，好像蠻少遇到台灣公司是這樣開發的，畢竟大家第一個會覺得我都沒時間開發新功能了，還寫測試，不知道大家有沒有用TDD開發的經驗。</p>\n<h1 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h1><p><a href=\"https://miahsuwork.medium.com/%E7%AC%AC%E4%B8%89%E9%80%B1-javascript-%E6%B8%AC%E8%A9%A6%E6%A1%86%E6%9E%B6-jest-eccf0ff2cea2\">[第三週] JavaScript - 測試框架 Jest</a></p>\n","feature":true,"text":"Github程式範例 為何要做測試 ?為了在人工測試前先進行初步的除錯，發展出了自動化測試。 前端常見的自動化測試有兩大類別，此篇主要是講解「Unit Test」，以下為簡單的類別說明： Unit Test單元測試，是以單一個行為進行測試，通常專案中最小的單位就是 funcito...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"frontend","slug":"frontend","count":2,"path":"api/categories/frontend.json"}],"tags":[{"name":"jest","slug":"jest","count":1,"path":"api/tags/jest.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%82%BA%E4%BD%95%E8%A6%81%E5%81%9A%E6%B8%AC%E8%A9%A6\"><span class=\"toc-text\">為何要做測試 ?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Unit-Test\"><span class=\"toc-text\">Unit Test</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#E2E-Test\"><span class=\"toc-text\">E2E Test</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Jest\"><span class=\"toc-text\">如何使用Jest ?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Jest%E7%B8%BD%E7%B5%90\"><span class=\"toc-text\">Jest總結</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AFTDD\"><span class=\"toc-text\">什麼是TDD ?</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><span class=\"toc-text\">參考資料</span></a></li></ol>","author":{"name":"Cabie Wu","slug":"blog-author","avatar":"https://sites.google.com/site/jiayulpy/_/rsrc/1466150305751/1235/2.jpg","link":"/","description":"喜歡嘗試各種事物和學習新領域，就用這BLOG紀錄下來吧!<br><br> 走得慢沒關係，但每天都要進步一點!","socials":{"github":"https://github.com/cabie8399","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"[美食] 港豐撈麵飯堂","uid":"6aa64a52b40c25b89cb37af9e6e1dc70","slug":"Life/travel/美食-0001-港豐","date":"2023-02-09T04:15:36.000Z","updated":"2023-02-09T16:28:19.464Z","comments":true,"path":"api/articles/Life/travel/美食-0001-港豐.json","keywords":null,"cover":"https://pizzacodeblog.files.wordpress.com/2020/09/c7785-026ezuvqbhpedt6uq.jpg","text":"今天來到板橋當地蠻有名氣的港式料理餐廳不得不說真的超便宜大部分餐點位於60–150之間少數幾個餐點200多塊和朋友們 4個人吃平均一人花差不多300多塊份量非常足夠 熱門時段不提供電話預約像這次晚上6點後就不提供電話預約需要現場等候其實等蠻快，大約等10分鐘左右但可能因為是平日吧...","link":"","photos":[],"count_time":{"symbolsCount":358,"symbolsTime":"1 mins."},"categories":[{"name":"美食","slug":"美食","count":1,"path":"api/categories/美食.json"}],"tags":[{"name":"美食-港式","slug":"美食-港式","count":1,"path":"api/tags/美食-港式.json"}],"author":{"name":"Cabie Wu","slug":"blog-author","avatar":"https://sites.google.com/site/jiayulpy/_/rsrc/1466150305751/1235/2.jpg","link":"/","description":"喜歡嘗試各種事物和學習新領域，就用這BLOG紀錄下來吧!<br><br> 走得慢沒關係，但每天都要進步一點!","socials":{"github":"https://github.com/cabie8399","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}